version: '2'

services:

### Fluentd Container #########################################
  fluentd:
    image: fluent/fluentd:latest
    ports:
      - "24224:24224"
    volumes:
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf

### MySql Container ###########################################
  mysql:
    build:
      context: ./mysql
    volumes:
      - /etc/docker/.data/mysql:/var/lib/mysql

### Redis Container ###########################################
  redis:
    image: redis:latest
    networks:
      - backend

### APP Container ###########################################
  app:
    build:
      context: .
      args:
        - BUNDLE_INSTALL_OPTION=
    environment:
      TZ: Asia/Tokyo
      REDIS_URL: redis://redis:6379
      RAILS_LOG_TO_STDOUT: enable
      USE_UNIXSOCKET: enable
    volumes:
      - .:/var/capibara
    networks:
      - backend
    depends_on:
      - fluentd
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: docker.{{.FullID}}
    links:
      - redis
    volumes_from:
      - mysql


### NGINX Server Container ##################################
  nginx:
    build:
      context: ./nginx
    environment:
      TZ: Asia/Tokyo
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/capibara.conf:/etc/nginx/sites-available/capibara.conf
    ports:
      - 80:80
    volumes_from:
      - app
    depends_on:
      - fluentd
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: docker.{{.FullID}}
    networks:
      - frontend
      - backend

### Workspace Utilities #####################################
  workspace:
    env_file: ./workspace/.env
    build:
      context: ./workspace
    environment:
      TZ: Asia/Tokyo
      REDIS_URL: redis://redis:6379
    volumes:
      - .:/var/capibara
      - /etc/docker/.cache/bundle:/usr/local/bundle
    links:
      - redis
    volumes_from:
      - mysql

### Networks Setup ##########################################

networks:
  frontend:
    driver: "bridge"
  backend:
    driver: "bridge"